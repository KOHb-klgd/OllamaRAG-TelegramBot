from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from typing import Dict
from config import Config, logger
from utils import generate_response


class UserStates(StatesGroup):
    WAITING_FOR_QUERY = State()
    IN_CHAT_MODE = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_modes: Dict[int, str] = {}


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")],
            [KeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥—É—à–∞–º")],
        ],
        resize_keyboard=True,
    )


def register_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""

    @dp.message(Command("start"))
    async def cmd_start(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        await state.clear()
        user_id = message.from_user.id
        user_modes[user_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
        await message.answer(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç —Å –¥–≤—É–º—è —Ä–µ–∂–∏–º–∞–º–∏:\n"
            "1. <b>üîç –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π</b> ‚Äî –∏—â—É –æ—Ç–≤–µ—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö\n"
            "2. <b>üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥—É—à–∞–º</b> ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ò–ò",
            reply_markup=get_main_keyboard(),
            parse_mode=ParseMode.HTML,
        )

    @dp.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
    async def enable_rag_mode(message: types.Message, state: FSMContext):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."""
        user_id = message.from_user.id
        user_modes[user_id] = "RAG"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.")
        await state.set_state(UserStates.WAITING_FOR_QUERY)
        await message.answer(
            "üîç –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
            reply_markup=get_main_keyboard(),
        )

    @dp.message(lambda message: message.text == "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥—É—à–∞–º")
    async def enable_chat_mode(message: types.Message, state: FSMContext):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è."""
        user_id = message.from_user.id
        user_modes[user_id] = "CHAT"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.")
        await state.set_state(UserStates.IN_CHAT_MODE)
        await message.answer(
            "üí¨ –†–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=get_main_keyboard(),
        )

    @dp.message(UserStates.WAITING_FOR_QUERY)
    async def process_rag_query(message: types.Message, bot: Bot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."""
        user_id = message.from_user.id
        if user_modes.get(user_id) != "RAG":
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –±–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞.")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.")
            return

        async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
            response = await generate_response(message.text, use_context=True)
            await message.answer(response, reply_markup=get_main_keyboard())

    @dp.message(UserStates.IN_CHAT_MODE)
    async def process_chat_message(message: types.Message, bot: Bot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è."""
        user_id = message.from_user.id
        if user_modes.get(user_id) != "CHAT":
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞.")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ä–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.")
            return

        async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
            response = await generate_response(message.text, use_context=False)
            await message.answer(response, reply_markup=get_main_keyboard())
